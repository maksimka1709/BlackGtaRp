{"version":3,"sources":["panels/Home.js","panels/Persik.js","panels/OurGroups.js","panels/Accounts.js","App.js","index.js","img/persik.png"],"names":["Home","id","go","fetchedUser","title","before","photo_200","src","description","city","first_name","last_name","size","mode","onClick","data-to","osName","platform","bots","name","avatar","desc","Persik","props","left","IOS","header","map","bot","index","key","App","useState","activePanel","setActivePanel","setUser","popout","setPopout","useEffect","a","bridge","send","user","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","Accounts","ReactDOM","render","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9aa61977.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\n\nconst Home = ({ id, go, fetchedUser }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>ЧЁРНЫЙ GTA-RP</PanelHeader>\n\t\t{fetchedUser &&\n\t\t<Group title=\"User Data Fetched with VK Bridge\">\n\t\t\t<Cell\n\t\t\t\tbefore={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n\t\t\t\tdescription={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\n\t\t\t>\n\t\t\t\t{`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n\t\t\t</Cell>\n\t\t</Group>}\n\n\t\t<Group title=\"Navigation Example\">\n\t\t\t<Div>\n\t\t\t\t<Button size=\"xl\" mode='secondary' onClick={go} data-to=\"persik\">\n\t\t\t\t\tНаша команда\n\t\t\t\t</Button>\n\t\t\t</Div>\n\t\t\t<Div>\n\t\t\t\t<Button size='xl' mode='secondary' onClick={go} data-to=\"groups\">\n\t\t\t\t\t\tНаши группы\n\t\t\t\t\t</Button>\n\t\t\t</Div>\n\t\t\t<Div>\n\t\t\t\t<Button size='xl' mode='secondary' onClick={go} data-to=\"accounts\">\n\t\t\t\t\t\tКак получить аккаунт?\n\t\t\t\t\t</Button>\n\t\t\t</Div>\t\t\t\t\n\t\t</Group>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS, Cell, Avatar, List, Header, Group} from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport PanelHeaderButton from '@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst osName = platform();\n\nconst bots = [\n    {\n        name: 'Никита Конев',\n        avatar: 'https://sun9-46.userapi.com/c857532/v857532854/25de3/zv-bh73WI_g.jpg?ava=1',\n        desc: 'Rivers'\n    },\n    {\n        name: 'Руслан Гаджиев',\n        avatar: 'https://sun9-14.userapi.com/Uebazij-w7YQEVuNoBVzZdMydfZCKXTowhEvCQ/2qQal_YM4IA.jpg?ava=1',\n        desc: 'ЧСник'\n    },\n    {\n        name: 'Максим Дёмин',\n        avatar: 'https://sun9-26.userapi.com/c855520/v855520161/21b4cd/AZ2osKzhnL8.jpg?ava=1',\n        desc: 'Черный Gangster'\n    },\n    {\n        name: 'Александр Владимиров',\n        avatar: 'https://sun9-2.userapi.com/c850416/v850416844/10a0e1/pAmwHvvkiWU.jpg?ava=1',\n        desc: 'developer'\n    },\n];\n\nconst Persik = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<PanelHeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</PanelHeaderButton>}\n\t\t>\n\t\t\tНаша команда\n\t\t</PanelHeader>\n        <Group header={<Header mode=\"secondary\">RT Team</Header>}>\n        <List>\n                    {bots.map((bot, index) => (\n                        <Cell\n                            key={index}\n                            description={bot.desc}\n                            before={<Avatar size={40} src={bot.avatar}/>}\n                        >\n                            {bot.name}\n                        </Cell>\n                    ))}\n                </List>\n        </Group>        \n\t</Panel>\n);\n\nPersik.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Persik;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { platform, IOS, Cell, Avatar, List, Header, Group, Card} from '@vkontakte/vkui';\r\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\r\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\r\nimport PanelHeaderButton from '@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton';\r\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\r\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\r\n\r\nimport persik from '../img/persik.png';\r\nimport './Persik.css';\r\n\r\nconst osName = platform();\r\n\r\nconst bots = [\r\n    {\r\n        name: 'ЧЁРНЫЙ GTARP',\r\n        avatar: 'https://sun9-64.userapi.com/Qww1fkk2Gpqj1DrACw_MIzhzM13IwKvYUncKAQ/5ivbIpzrUpE.jpg?ava=1',\r\n        desc: 'Основное сообщество'\r\n    },\r\n    {\r\n        name: 'РАЗДАЧИ ОТ ЧЁРНОГО GTARP',\r\n        avatar: 'https://sun9-64.userapi.com/Qww1fkk2Gpqj1DrACw_MIzhzM13IwKvYUncKAQ/5ivbIpzrUpE.jpg?ava=1',\r\n        desc: 'Раздачи и покупка аккаунтов'\r\n    },\r\n];\r\n\r\nconst Persik = props => (\r\n\t<Panel id={props.id}>\r\n\t\t<PanelHeader\r\n\t\t\tleft={<PanelHeaderButton onClick={props.go} data-to=\"home\">\r\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\r\n\t\t\t</PanelHeaderButton>}\r\n\t\t>\r\n\t\t\tНаши группы\r\n\t\t</PanelHeader>\r\n        <Group header={<Header mode=\"secondary\">RT Groups</Header>}>\r\n        <List>\r\n                    {bots.map((bot, index) => (\r\n                        <Cell\r\n                            key={index}\r\n                            description={bot.desc}\r\n                            before={<Avatar size={40} src={bot.avatar}/>}\r\n                        >\r\n                            {bot.name}\r\n                        </Cell>\r\n                    ))}\r\n                </List>      \r\n        </Group>   \r\n\t</Panel>\r\n);\r\n\r\nPersik.propTypes = {\r\n\tid: PropTypes.string.isRequired,\r\n\tgo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Persik;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { platform, IOS, Cell, Avatar, List, Header, Group, Card} from '@vkontakte/vkui';\r\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\r\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\r\nimport PanelHeaderButton from '@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton';\r\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\r\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\r\n\r\nimport persik from '../img/persik.png';\r\nimport './Persik.css';\r\n\r\nconst osName = platform();\r\n\r\nconst Persik = props => (\r\n\t<Panel id={props.id}>\r\n\t\t<PanelHeader\r\n\t\t\tleft={<PanelHeaderButton onClick={props.go} data-to=\"home\">\r\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\r\n\t\t\t</PanelHeaderButton>}\r\n\t\t>\r\n\t\t\tКак получить аккаунт?\r\n\t\t</PanelHeader>\r\n        <Group header={<Header mode=\"secondary\">Как получить аккаунт?</Header>}>\r\n        <Cell>1. Мы создаем пост с заданием в этой группе. </Cell>\r\n        <Cell>2. Вы его выполняете и пишите в СМС нашего сообщества слово \"аккаунт\". </Cell>\r\n        <Cell>3. Далее наш бот проверяет выполненное вами задание(в основном это поставить лайк, оставить комментарий разного характера), и моментально высылает вам рандомный аккаунт.</Cell>\r\n\t   </Group>\r\n       <Group header={<Header mode=\"secondary\">Какой минимальный уровень у этих аккаунтов?</Header>}>\r\n       <Cell>В нашей базе нет аккаунтов 1-2 уровня, все аккаунты строго от 3 до не определенного.</Cell>\r\n       </Group>\r\n       <Group header={<Header mode=\"secondary\">Что делать, если аккаунт нерабочий?</Header>}>\r\n       <Cell>Если аккаунт оказался нерабочим, не стоит переживать, такое бывает, но не часто. Таких заданий будет много, в любом случае получите - достаточное кол-во аккаунтов.</Cell>\r\n       </Group>\r\n        <Group header={<Header mode=\"secondary\">Важно</Header>}>\r\n        <Cell>Перед тем как написать боту, ОТКРОЙТЕ ПРОФИЛЬ - закрытым профилям аккаунты бот не дает.</Cell>\r\n        </Group>\r\n    </Panel>\r\n);\r\n\r\nPersik.propTypes = {\r\n\tid: PropTypes.string.isRequired,\r\n\tgo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Persik;\r\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport Persik from './panels/Persik';\nimport Groups from './panels/OurGroups';\nimport Accounts from './panels/Accounts';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(null);\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n\t\t\t<Persik id='persik' go={go} />\n\t\t\t<Groups id='groups' go={go} />\n\t\t\t<Accounts id='accounts' go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n","module.exports = __webpack_public_path__ + \"static/media/persik.4e1ec840.png\";"],"sourceRoot":""}